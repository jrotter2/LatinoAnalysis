from PhysicsTools.NanoAODTools.postprocessing.framework.datamodel import Collection
from PhysicsTools.NanoAODTools.postprocessing.framework.eventloop import Module
from PhysicsTools.NanoAODTools.postprocessing.modules.common.collectionMerger import collectionMerger
import ROOT
import os.path
ROOT.PyConfig.IgnoreCommandLineOptions = True


class hwwReWgtCombineSamples(Module):
    def __init__(self, sample, year, cfg_path, xsecs_path):
        print("########################", sample)
        self.sample = sample
        self.year = year
        self.cmssw_base = os.getenv('CMSSW_BASE')
        self.cmssw_arch = os.getenv('SCRAM_ARCH')
        #print("Starting Example Analysis Module")
        #Creating histogram TH1F
        #self.combinationWgts = ROOT.TH2F('combinationWgts', 'combinationWgts', 6,-.5, 5.5, 6, -.5 , 5.5) #200, 350, 500, 600, 800, 1000

        #self.diffXSec_kappa_top_bot_CPStoBW = ROOT.TH1F('CPStoBW_diffXSec', 'CPStoBW_diffXSec', 200, -0.5, 4999.5)
        #self.ptWW_250to350 = ROOT.TH1F('ptWW_250to350', 'ptWW_250to350', 10, -0.5, 1499.5)
        #self.ptWW_350to1000 = ROOT.TH1F('ptWW_350to1000', 'ptWW_350to1000', 10, -0.5, 1499.5)
        #self.ptWW_1000to2000 = ROOT.TH1F('ptWW_1000to2000', 'ptWW_1000to2000', 10, -0.5, 1499.5)
        #self.ptWW_2000toInf = ROOT.TH1F('ptWW_2000toInf', 'ptWW_2000toInf', 10, -0.5, 1499.5)


        #Adding histogram as an Object to be saved later
        #self.addObject(self.diffXSec_kappa_top_bot_CPStoBW)
        #self.addObject(self.ptWW_250to350)
        #self.addObject(self.ptWW_350to1000)
        #self.addObject(self.ptWW_1000to2000)
        #self.addObject(self.ptWW_2000toInf)
        #self.out.branch('hww_comb_wgt', 'F')
        #print("Finished Making Histograms")

        self.sampleMass = str(self.sample)[str(self.sample).find('_M') + 2:]

        renorm_scaleFactor_list = {
                                   "125" : 1,
                                   "160" : 1,
                                   "170" : 1,
                                   "180" : 1,
                                   "190" : 1,
                                   "200" : 1,
                                   "210" : 0.921783934922,
                                   "230" : 1.05174825805,
                                   "250" : 1.00585068462,
                                   "270" : 1.02359746461,
                                   "300" : 0.946472548194,
                                   "350" : 0.921732746232,
                                   "400" : 0.960072426187,
                                   "500" : 0.910829207738,
                                   "600" : 0.915928142853,
                                   "700" : 0.939819595714,
                                   "800" : 1.00227423586,
                                   "900" : 0.948877572619,
                                   "1000" : 0.9710828871, #1.04711366386,
                                   "1500" : 1.01672378281, #1.55757464814,
                                   "2000" : 3.37406711704, #3.31856810481,
                                   "2500" : 8.28587472011, #2.4557527852,
                                   "3000" : 20.4368418258 #2.46646763512
                                   }

        self.renorm_scaleFactor = renorm_scaleFactor_list[str(self.sampleMass)]
        print("RENORM SCALE FACTOR: ", self.renorm_scaleFactor)
        br_cor_file = open("/eos/user/t/tcarnaha/Summer_2022/HWW_Ntuples/Autumn18_102X_nAODv7_Full2018v7/MCl1loose2018v7__MCCorr2018v7__l2loose__l2tightOR2018v7__AddLHE_MEs/BRcorrection/ggHweightsnew.txt", "r")

        self.br_cor = 1
        for line in br_cor_file.readlines():
            line_comps = line.split("\t")
            if(int(line_comps[0]) == int(self.sampleMass)):
                self.br_cor = float(line_comps[1])/float(line_comps[2])
                print("Found Matching Row in BR Cor LUT")
        print("Sample Mass:" + str(self.sampleMass) + " | BR Correction:" + str(self.br_cor))

                        # < 350                 #350-500              #500-600               #600-800               #800-1000               # 1000 <
        #self.wgt_matrix = [[0.6543447130687254, 0.00987624732674343, 0.0012418599262687064, 0.0010441094566786494, 0.00032810711853616613, 0.0004284680000612537], # 200
        #              [0.11545249791431161, 0.4380133504000743, 0.021009898983020983, 0.010501032101158297, 0.0033776535489106786, 0.003161261807349071], # 350
        #              [0.044533189436198106, 0.2587868312494348, 0.45628502828925727, 0.06862063162336288, 0.01350652661710446, 0.00973849341076548], #500
        #              [0.04712037457442306, 0.1331203102821931, 0.3739652823237035, 0.4417480382336473, 0.04892917733483493, 0.02849881927255742], # 600
        #              [0.05215709380258053, 0.09121289964441842, 0.09355678322905316, 0.34042911947950844, 0.5908386840534822, 0.20434594061962827], #800
        #              [0.08639213120376132, 0.06899036109713601, 0.05394114724869644, 0.13765706910564438, 0.3430198513271317, 0.7538270168896385]] #1000

        self.wgt_matrix = [
[1.0, 0.9997291816158215, 0.0008619286857674675, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.00010402372097853286, 0.3549873333378911, 0.05181903109183127, 0.01810208995614076, 0.008851939959188919, 0.004435924488767438, 0.00883646080228431, 0.005088209087093616, 0.003515813154193316, 0.0020669131929875934, 0.001775110589902378, 0.0011180036671667004, 0.0013250140320444593, 0.0004918004274823821, 0.00015046955821421294, 0.0001204192684385189, 9.277996065070341e-05, 5.161871549010093e-05, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.943225190202548e-05, 0.5188639472648193, 0.4412419148238354, 0.05992336579534976, 0.020530535104779826, 0.009836741005870783, 0.01409278190795613, 0.009011557633370101, 0.0044659014504275845, 0.003213190112210459, 0.0024283880880717084, 0.0016607431043330842, 0.001605374278161447, 0.0005950528271957605, 0.00025122554015923385, 0.0001556285470309599, 7.856138897708577e-05, 7.508283779943361e-05, 6.777250047600148e-05, 2.180196003513469e-05, 5.948599505808278e-06, 0.0, 0.0], [0.0, 5.835072275053572e-05, 0.05961766543605643, 0.3835241774483253, 0.4099886141838635, 0.05504008655935159, 0.021223369604839656, 0.02784644422866788, 0.012004573894716562, 0.005945306412720263, 0.003709316770072707, 0.0029482225401805087, 0.001628763164003678, 0.0018536961572582973, 0.0006013659797262979, 0.0002901358266811092, 0.00017678756447899558, 0.00012661591382835913, 0.00011262463613838703, 8.401366386415924e-05, 2.9067754601142e-05, 5.948598850777272e-06, 0.0, 0.0], [0.0, 2.0045429883749656e-05, 0.022773621188402673, 0.05873746492865419, 0.4031242887208709, 0.4343055278221198, 0.06024777519878248, 0.04705647230996131, 0.01818372450175477, 0.00896455098986354, 0.004437684548775709, 0.003996358174572048, 0.0019268970407852921, 0.0020489726702775427, 0.0007676225437512105, 0.00040428285096302693, 0.00023360751804961632, 0.0001707096578304595, 9.385250245664368e-05, 8.869586300123046e-05, 1.974696667874357e-05, 1.992968948676416e-06, 0.0, 0.0], [0.0, 0.0, 0.008230767336462963, 0.022317882007818236, 0.050850969926046534, 0.38508230878690597, 0.44288843131690936, 0.09736593178446329, 0.027981984345775146, 0.011194225796076053, 0.005567823108509869, 0.004370525461383892, 0.0025992100574904293, 0.0025016045494014, 0.0008245476457724185, 0.0004608364407694039, 0.00024623180910833667, 0.00013876922542360124, 0.00010393424040932518, 0.0001078645562577404, 2.5435272446618074e-05, 1.1897185293519284e-05, 0.0, 0.0], [0.0, 4.1044639144986836e-05, 0.004930582742422654, 0.01595701274262453, 0.020523385309574357, 0.06011512771567384, 0.4013331679896826, 0.3593806748737616, 0.047882098534806024, 0.01865142660422676, 0.007219119767240909, 0.006130892654631304, 0.00275749435932667, 0.0024839455347049548, 0.0010565810216974438, 0.0004488450481954793, 0.00018641453546896028, 0.00014867901638826607, 0.00013608406811747202, 9.575736569926712e-05, 2.543534297542882e-05, 5.948598670365374e-06, 0.0, 0.0], [0.0, 1.3960810409390128e-05, 0.005956263243085147, 0.006405772694486509, 0.007428461089038786, 0.0107215693258797, 0.025710101220804304, 0.2993772090307542, 0.377213034999072, 0.05221350812545742, 0.017095729823399193, 0.007860346766311085, 0.00396551928759255, 0.003339899021613946, 0.0011783754921905068, 0.0005013903007140973, 0.0003370440039834606, 0.00019370600368582094, 0.00010814360683898212, 9.313821114597068e-05, 2.1801545005790413e-05, 1.1897193321728271e-05, 0.0, 0.0], [0.0, 0.0, 0.0032949675383051086, 0.0019226260808185753, 0.005069704708505988, 0.0041496455895089655, 0.009127406721267724, 0.047669404352894136, 0.32684270440220203, 0.3754342592829216, 0.03851939786232929, 0.014536738796123152, 0.00581538903062447, 0.004422763967595755, 0.0015653106301838614, 0.0005397463287374412, 0.00038507020156348416, 0.0002761650463866939, 0.00020646849234832475, 0.00010955328391971155, 3.270171011447214e-05, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0033448838895358338, 0.002746375001468375, 0.0018194135927949793, 0.0027380924548352933, 0.003985687710323958, 0.02065047644331791, 0.05172263735919416, 0.31881414041670486, 0.1829904100492091, 0.02737584663554719, 0.008551233354493783, 0.006072926839305111, 0.0018516149291568377, 0.0007557792212692664, 0.0004071661296001159, 0.0002634606611150711, 0.0002862275730216447, 0.00019786951457025412, 6.176928712772853e-05, 1.1897174306239845e-05, 1.2295800959854637e-05, 0.0], [0.0, 0.0, 0.002562995264735502, 0.0031135245489299305, 0.006937970404808679, 0.005964305108134752, 0.006348108450910116, 0.02946153262035117, 0.05996203355450324, 0.12672130139623014, 0.6320703541595563, 0.4829115143938779, 0.07497228444918737, 0.03979659973716955, 0.010990347096774357, 0.004283869043961607, 0.0020831588760154836, 0.0013211678473729778, 0.0009619462699700862, 0.0007820173005417548, 0.00016696469857846861, 5.9484230203732685e-05, 1.229580071824583e-05, 0.0], [0.0, 0.0, 0.000861928728940336, 0.003507121512338375, 0.002326795304771863, 0.001780756717418287, 0.0030099469226431757, 0.00979758624898239, 0.014563934278551974, 0.020695165625013504, 0.03871695022551248, 0.29282782773494187, 0.43372326064791816, 0.07485857968314388, 0.013949819185567912, 0.004771848823392993, 0.0023657915720273867, 0.0014620607411993873, 0.0010276851638104912, 0.0007882695949262121, 0.00018884516535873206, 0.00010112393520736462, 2.4591194704350033e-05, 3.320998286511167e-05], [0.0, 0.0, 0.0017147636258647036, 0.0004016793002079344, 0.0018468480821440798, 0.0019516216629781307, 0.001389851013132981, 0.004236712643725575, 0.006141749161212876, 0.009504145986853271, 0.01198583777451619, 0.04731682645873408, 0.2969466887893645, 0.2826607784538261, 0.02688666027091969, 0.00780149913356316, 0.0035532956682496025, 0.002103275741240632, 0.0012247455010074458, 0.001033138702522336, 0.0002034220955243969, 5.948485277474488e-05, 4.9181682616261776e-05, 3.320998369624903e-05], [0.0, 0.0, 0.0008619287431406541, 0.0011887109292645509, 0.0011462595822952241, 0.00032148865337683905, 0.0012639413797731636, 0.003620040952069118, 0.004607036714266812, 0.004511852286854318, 0.005994894668226891, 0.014197687728090502, 0.03213778195997191, 0.2086115712397829, 0.3029301184841706, 0.03724663938433533, 0.012295053833055992, 0.006101777081499612, 0.003836181535987105, 0.002586224159553817, 0.0004541556586262248, 0.00012491489389534653, 0.0, 3.3209985207350583e-05], [0.0, 0.0, 0.0008619286642649736, 0.0004016792809888515, 0.001153739429245481, 0.0006507413199111362, 0.0008852177816470035, 0.003140696230784942, 0.0040219296310579685, 0.0038483180953430467, 0.004843601410726733, 0.010991077921337853, 0.01892005792792105, 0.07248423795784922, 0.24829104730116072, 0.31341064729835316, 0.06283574697079679, 0.023314609205493997, 0.012978549497880632, 0.007663001926033874, 0.0011736010774858617, 0.00029737170273164034, 0.00017210033462114683, 6.636124029823897e-05], [0.0, 0.0, 0.001723265227766417, 0.0007970600070910934, 0.001627434437474314, 0.000806359784503924, 0.0005070483702454125, 0.003501164054519404, 0.0034726456620895498, 0.004527894834408378, 0.004120909657620855, 0.010103181020022209, 0.016441726573121263, 0.05012686821762247, 0.09649775330921587, 0.24917934771947126, 0.3076218093986563, 0.10279814521056961, 0.045707728280709674, 0.021301841881305173, 0.002937997806228243, 0.000778974006891131, 0.00027044155612647203, 0.00019843571478258526], [0.0, 0.0, 0.0017207785573652148, 0.00040167925102857336, 0.0006965256009449894, 0.0011323998337817744, 0.0008777814672572158, 0.0028781978789099616, 0.0038364476977766357, 0.004525053853799062, 0.004457097530291304, 0.009562749979467577, 0.014147091672404423, 0.040791972529165665, 0.06211724802386875, 0.10868671472844572, 0.23472012755318, 0.2904432205938033, 0.14908096730995585, 0.05797651099551927, 0.006446340593571355, 0.0014801006384706696, 0.0006512781721279166, 0.0003645923837920525], [0.0, 1.3960809109487096e-05, 0.0016897602029911404, 0.0015935451549169276, 0.0013637746898464136, 0.0008212170815933742, 0.001133689457377589, 0.0036768029157067464, 0.003370414581129163, 0.0033365703438081834, 0.0049110258931936825, 0.009612594020245155, 0.014356427734252357, 0.0384057308358026, 0.051243574204113136, 0.07415778030669043, 0.13006231361958537, 0.24086279295328414, 0.30582401232329365, 0.149177003722358, 0.014431645543746357, 0.0030765524465807548, 0.0010195025975057313, 0.0006282040535643071], [0.0, 0.0, 0.0, 0.0, 0.0006985465167874919, 0.0008189610298606138, 0.0005034190936280777, 0.0023399582291087346, 0.0029758008507963147, 0.0031214964840046836, 0.004313589398092738, 0.00783844215840641, 0.010970863775793692, 0.029082764552921855, 0.035814710857047134, 0.046634134433016054, 0.06967000952680286, 0.11640256583793562, 0.19571924864616697, 0.21990603806603515, 0.02206250886244432, 0.004544191979958238, 0.0016213835245580195, 0.0008931543979831702], [0.0, 0.0, 0.0008619287350034449, 0.0007859910236772856, 0.0013952214189561945, 0.0009706311161299088, 0.0015055510583388237, 0.004734981665915864, 0.005891332430646201, 0.005466341227150613, 0.00710754836571978, 0.0120666799495692, 0.015728871098402618, 0.038013738305082284, 0.04049558116630574, 0.04411915103501921, 0.05299123900942871, 0.06774152902684556, 0.09464834613697343, 0.1914747031450373, 0.2834433014117182, 0.07539109030717643, 0.02211802010785453, 0.01406972691401441], [0.0, 0.0, 0.0025549041954691038, 0.0007904365934971934, 0.0011610799833203778, 0.0014594591340516443, 0.0007582933711299684, 0.0032878178611854673, 0.004250461156243692, 0.004134792930918484, 0.005789489865637962, 0.009077084733819792, 0.013004427342062443, 0.03222071893015231, 0.03300763740470338, 0.03497381689147965, 0.03973233360674516, 0.04948260049190893, 0.06489214908806637, 0.12548741166755667, 0.2871014427720084, 0.3121119992089203, 0.09757045170037994, 0.046501083263349466], [0.0, 0.0, 0.0008619286649490642, 0.0007733190817720747, 0.00187197986929345, 0.001459706266128687, 0.00188900834843786, 0.003916840997275346, 0.0054745023223530895, 0.004925179196916209, 0.00479975250515892, 0.010772214995616976, 0.013737781172318959, 0.032685696604190725, 0.03382252913121807, 0.03527194093740386, 0.03979185016225335, 0.04863817322038337, 0.061909910508597954, 0.11276039522466444, 0.20813942511302164, 0.3505748687696726, 0.39597920525178887, 0.1910402065026722], [0.0, 0.0, 0.0008619287267610005, 0.0015729964964251361, 0.0009435313979254171, 0.00032751897388690597, 0.0011395380282303836, 0.0031318119674045614, 0.0055011872013883585, 0.0054827555061084075, 0.006069363311011489, 0.011299689199147252, 0.014889483791464717, 0.034606545902927596, 0.03502070206777788, 0.03565989914916439, 0.040028900625480555, 0.047838635174176726, 0.06101449306496, 0.10821877865501163, 0.17301258936270258, 0.25134431270862007, 0.48049925227603857, 0.7461386055777748]]
        pass

    def beginJob(self, histFile=None, histDirName=None):
        pass

    def beginFile(self, inputFile, outputFile, inputTree, wrappedOutputTree):
        self.out = wrappedOutputTree
        self.newbranches =  ['HWWOffshell_comb_sample_wgt']
        for nameBranches in self.newbranches :
            self.out.branch(nameBranches  ,  "F");

    def endFile(self, inputFile, outputFile, inputTree, wrappedOutputTree):
        pass

    def analyze(self, event):
        """process event, return True (go to next module) or False (fail, go to next event)"""

        #Collects all the muons in the event - As long as the Muons collection is is kept in keep_and_drop.txt
        genPart = Collection(event, "GenPart")
        
        nWs = 0
        w_ids = []

        for i in range(0, len(genPart)):
            part = genPart[i]
            if(abs(part.pdgId) == 24 and abs(genPart[genPart[i].genPartIdxMother].pdgId) == 25):
                nWs += 1
                w_ids.append(i)

        if(nWs != 2):
            return True

        j = 0
        m_ww = genPart[w_ids[0]].p4() + genPart[w_ids[1]].p4()
        m_ww_mass = m_ww.M()

        if(m_ww_mass > 125 and m_ww_mass < 160):
            j = 1
        elif(m_ww_mass >=160 and m_ww_mass < 170):
            j = 2
        elif(m_ww_mass >=170 and m_ww_mass < 180):
            j = 3
        elif(m_ww_mass >=180 and m_ww_mass < 190):
            j = 4
        elif(m_ww_mass >=190 and m_ww_mass < 200):
            j = 5
        elif(m_ww_mass >=200 and m_ww_mass < 210):
            j = 6
        elif(m_ww_mass >=210 and m_ww_mass < 230):
            j = 7
        elif(m_ww_mass >=230 and m_ww_mass < 250):
            j = 8
        elif(m_ww_mass >=250 and m_ww_mass < 270):
            j = 9
        elif(m_ww_mass >=270 and m_ww_mass < 300):
            j = 10
        elif(m_ww_mass >=300 and m_ww_mass < 350):
            j = 11
        elif(m_ww_mass >=350 and m_ww_mass < 400):
            j = 12
        elif(m_ww_mass >=400 and m_ww_mass < 500):
            j = 13
        elif(m_ww_mass >=500 and m_ww_mass < 600):
            j = 14
        elif(m_ww_mass >=600 and m_ww_mass < 700):
            j = 15
        elif(m_ww_mass >=700 and m_ww_mass < 800):
            j = 16
        elif(m_ww_mass >=800 and m_ww_mass < 900):
            j = 17
        elif(m_ww_mass >=900 and m_ww_mass < 1000):
            j = 18
        elif(m_ww_mass >=1000 and m_ww_mass < 1500):
            j = 19
        elif(m_ww_mass >= 1500 and m_ww_mass < 2000):
            j = 20
        elif(m_ww_mass >=2000 and m_ww_mass < 2500):
            j = 21
        elif(m_ww_mass >=2500 and m_ww_mass < 3000):
            j = 22
        elif(m_ww_mass >= 3000):
            j = 23


        i = 0
        if(self.sampleMass == "160"):
            i=1
        elif(self.sampleMass == "170"):
            i=2
        elif(self.sampleMass == "180"):
            i=3
        elif(self.sampleMass == "190"):
            i=4
        elif(self.sampleMass == "200"):
            i=5
        elif(self.sampleMass == "210"):
            i=6
        elif(self.sampleMass == "230"):
            i=7
        elif(self.sampleMass == "250"):
            i=8
        elif(self.sampleMass == "270"):
            i=9
        elif(self.sampleMass == "300"):
            i=10
        elif(self.sampleMass == "350"):
            i=11
        elif(self.sampleMass == "400"):
            i=12
        elif(self.sampleMass == "500"):
            i=13
        elif(self.sampleMass == "600"):
            i=14
        elif(self.sampleMass == "700"):
            i=15
        elif(self.sampleMass == "800"):
            i=16
        elif(self.sampleMass == "900"):
            i=17
        elif(self.sampleMass == "1000"):
            i=18
        elif(self.sampleMass == "1500"):
            i=19
        elif(self.sampleMass == "2000"):
            i=20
        elif(self.sampleMass == "2500"):
            i=21
        elif(self.sampleMass == "3000"):
            i=22

        self.out.fillBranch('HWWOffshell_comb_sample_wgt', event.p_Gen_GG_SIG_kappaTopBot_1_ghz1_1_MCFM*event.p_Gen_CPStoBWPropRewgt*event.XSWeight*self.wgt_matrix[i][j]*self.renorm_scaleFactor*self.br_cor)
        #self.out.fillBranch('hww_comb_wgt', self.wgt_matrix[i][j])
        #self.diffXSec_kappa_top_bot_CPStoBW.Fill(m_ww.M(), event.p_Gen_GG_SIG_kappaTopBot_1_ghz1_1_MCFM*event.p_Gen_CPStoBWPropRewgt*event.XSWeight*self.wgt_matrix[i][j]*self.renorm_scaleFactor*self.br_cor)
       # if(m_ww.M() > 250 and m_ww.M() < 350):
       #     self.ptWW_250to350.Fill(m_ww.Pt(), event.p_Gen_GG_SIG_kappaTopBot_1_ghz1_1_MCFM*event.p_Gen_CPStoBWPropRewgt*event.XSWeight*self.wgt_matrix[i][j])
       # elif(m_ww.M() > 350 and m_ww.M() < 1000):
       #     self.ptWW_350to1000.Fill(m_ww.Pt(), event.p_Gen_GG_SIG_kappaTopBot_1_ghz1_1_MCFM*event.p_Gen_CPStoBWPropRewgt*event.XSWeight*self.wgt_matrix[i][j])
       # elif(m_ww.M() > 1000 and m_ww.M() < 2000):
       #     self.ptWW_1000to2000.Fill(m_ww.Pt(), event.p_Gen_GG_SIG_kappaTopBot_1_ghz1_1_MCFM*event.p_Gen_CPStoBWPropRewgt*event.XSWeight*self.wgt_matrix[i][j])
       # elif(m_ww.M() > 2000):
       #     self.ptWW_2000toInf.Fill(m_ww.Pt(), event.p_Gen_GG_SIG_kappaTopBot_1_ghz1_1_MCFM*event.p_Gen_CPStoBWPropRewgt*event.XSWeight*self.wgt_matrix[i][j])
        return True
